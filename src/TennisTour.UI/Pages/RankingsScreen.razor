@page "/rankings"
@using MudBlazor
@using TennisTour.Application.Models.Rankings;
@using TennisTour.UI.AuthProviders;
@using TennisTour.UI.Common;
@inject HttpClient httpClient

<PageTitle>Rankings | Tennis Tour</PageTitle>

<MudText Typo="Typo.h1" GutterBottom="true">Rankings</MudText>

<MudDivider DividerType="DividerType.Middle" Class="my-6" />

@if (Rankings == null)
{
	<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
} else
{
	<AuthorizeView Roles="Admin">
		
		<MudButton Variant="Variant.Text" Color="Color.Primary" Class="mb-6" OnClick="UpadateRankings">Upadate</MudButton>
		<MudText Typo="Typo.body1" Class="mb-6">Last updated: @LastUpdated</MudText>
	</AuthorizeView>
	
	<MudDataGrid T="RankingsResponseModel" Items="@Rankings" ReadOnly="true" Bordered="true" Filterable="true" FilterMode="DataGridFilterMode.Simple" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
		<Columns>
			<PropertyColumn Property="x => x.Rank" />
			<TemplateColumn T="RankingsResponseModel" Title="Name">
				<CellTemplate>
					<MudLink Href="@String.Format(UiConstants.ContenderDetailsRoute, context.Item.ContenderInfo.Id)">
						@context.Item.ContenderInfo.FirstName  @context.Item.ContenderInfo.LastName
					</MudLink>
				</CellTemplate>
			</TemplateColumn>
			<PropertyColumn Property="x => x.Points" Title="Points" />
			<PropertyColumn Property="x => x.PreviousPoints" Title="Previous points" />
			<PropertyColumn Property="x => x.PreviousRank" Title="Previous rank" />
			<PropertyColumn Property="x => x.BestRank" Title="Best rank" />
			<PropertyColumn Property="x => x.BestRankDate" Format="d" Title="Best rank date" />
		</Columns>
		<PagerContent>
			<MudDataGridPager T="RankingsResponseModel" />
		</PagerContent>
	</MudDataGrid>

}



@code {
	private List<RankingsResponseModel> Rankings { get; set; }
	private DateTime? LastUpdated { get; set; }

	protected override async Task OnInitializedAsync() 
	{
		await LoadRankings();
	}


	private async Task LoadRankings()
	{
		var rankings = await httpClient.GetFromJsonAsync<List<RankingsResponseModel>>(ApiConstants.RankingsGetAll);
		Rankings = rankings ?? new List<RankingsResponseModel>();
		LastUpdated = Rankings.Any() ? Rankings[0].UpdatedOn : null;
	}

	private async Task UpadateRankings()
	{
		var rankings = await httpClient.PostAsync(ApiConstants.RankingsUpdate, null);
        await LoadRankings();
    }

}
