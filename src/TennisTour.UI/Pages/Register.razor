@page "/register"
@using System.Text;
@using System.Text.Json;
@using Newtonsoft.Json;
@using TennisTour.UI.Helpers;
@using TennisTour.Application.Models.User;
@using TennisTour.Application.Models;
@using TennisTour.UI.Common;
@attribute [AllowAnonymous]

<PageTitle>Register | Tennis Tour</PageTitle>

<MudText Typo="Typo.h1">Register</MudText>
<MudDivider DividerType="DividerType.Middle" Class="my-6" />

@if (errors.Any())
{
    <MudAlert Severity="Severity.Error" Class="mb-3">
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </MudAlert>
}

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudTextField @bind-Value="model.Username" Label="Username" Variant="Variant.Outlined"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudTextField @bind-Value="model.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="PasswordToggle" AdornmentAriaLabel="Show Password" />
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudTextField @bind-Value="model.Email" Label="Email" Variant="Variant.Outlined"></MudTextField>
    </MudItem>
</MudGrid>
<MudButton Variant="Variant.Filled" class="my-12" Color="Color.Primary" OnClick="TryRegister" Disabled="isLoading">Register</MudButton>


@code {
    [Inject] ISnackbar Snackbar { get; set; }

    private CreateUserModel model = new CreateUserModel();
    private List<string> errors = new List<string>();
    private bool isLoading;

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    bool passwordVisible;
    void PasswordToggle()
    {
        @if (passwordVisible)
        {
            passwordVisible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            passwordVisible = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task TryRegister()
    {
        isLoading = true;
        errors.Clear();
        try
        {
            var content = new JsonNewtonContent(model);
            var result = await HttpClient.PostAsync(ApiConstants.RegisterRoute, content);
            var apiResult = JsonConvert.DeserializeObject<ApiResult<CreateUserResponseModel>>(await result.Content.ReadAsStringAsync());

            if (result.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/login");
                Snackbar.Add("Succes! You have to confirm your e-mail before loging in.", Severity.Success);
            }
            else
            {
                errors = apiResult.Errors.ToList();
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP request failed: {ex.Message}");
            Snackbar.Add("Error while trying to send request.", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
}
