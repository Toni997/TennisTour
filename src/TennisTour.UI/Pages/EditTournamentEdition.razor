@page "/tournament-editions/{TournamentEditionId:guid}/edit"
@using TennisTour.Application.Models.Validators.TounamentEdition
@using TennisTour.Application.Models.TournamentEdition
@attribute [Authorize(Roles = Roles.Admin)]

<PageTitle>Edit Tournament Edition | Tennis Tour</PageTitle>

<MudText Typo="Typo.h1" GutterBottom="true">Edit Tournament Edition</MudText>

<MudDivider DividerType="DividerType.Middle" Class="my-6" />

@if (model == null)
{
    if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudAlert Severity="Severity.Error">Error while getting tournament edition info</MudAlert>
    }
}
else
{
    <MudCard>
        <TournamentEditionForm model="@model" Submit="@Submit" />
    </MudCard>
}


@code {
    [Inject] ISnackbar Snackbar { get; set; }

    [Parameter]
    public Guid TournamentEditionId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private UpsertTournamentEditionModel model;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;

        isLoading = true;
        try
        {
            var response = await HttpClient.GetAsync(String.Format(ApiConstants.TournamentEditionsGetOneRoute, TournamentEditionId));
            if (response.IsSuccessStatusCode)
            {
                var apiResult = JsonConvert.DeserializeObject<ApiResult<UpsertTournamentEditionModel>>(await response.Content.ReadAsStringAsync());
                model = apiResult.Result;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP request failed: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Submit()
    {
        try
        {
            var content = new JsonNewtonContent(model);
            var response = await HttpClient.PutAsync(String.Format(ApiConstants.TournamentEditionsEditRoute, TournamentEditionId), content);
            var responseContent = await response.Content.ReadAsStringAsync();
            response.EnsureSuccessStatusCode();

            var result = JsonConvert.DeserializeObject<ApiResult<UpsertTournamentEditionResponseModel>>(responseContent);
            NavigationManager.NavigateTo(String.Format(UiConstants.TournamentEditionDetailsRoute, result?.Result.Id));

            Snackbar.Add("Successfully updated the tournament edition.", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP request failed: {ex.Message}");

            Snackbar.Add("Error updating the tournament.", Severity.Error);
        }
    }
}
