@page "/tournaments"
@using TennisTour.Application.Models.Tournament;
@using TennisTour.Application.Models;
@using TennisTour.UI.Common;
@using Newtonsoft.Json;
@using TennisTour.Core.Helpers
@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager;

<PageTitle>Tournaments | TennisTour</PageTitle>

<MudText Typo="Typo.h1" GutterBottom="true">Tournaments</MudText>

<MudDivider DividerType="DividerType.Middle" Class="my-6" />

<AuthorizeView Roles="@Roles.Admin">
    <MudButton OnClick="@(() => NavigationManager.NavigateTo("/tournaments/add"))" Variant="Variant.Filled" Color="Color.Primary" Class="mb-4">Add Tournament</MudButton>
</AuthorizeView>

@if (tournaments == null)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else if (tournaments.Count == 0)
{
    <MudAlert Severity="Severity.Info">No tournaments to display</MudAlert>
}
else {
    <MudDataGrid T="TournamentResponseModel" Items="@tournaments" ReadOnly="true" Bordered="true" Filterable="true" FilterMode="DataGridFilterMode.Simple" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <PropertyColumn Property="x => x.Name"/>
            <PropertyColumn Property="x => x.Series"/>
            <PropertyColumn Property="x => x.Surface" />
            <PropertyColumn Property="x => x.NumberOfRounds" Title="Number Of Rounds" />
            <TemplateColumn StickyRight="true">
                <CellTemplate>
                    <MudTooltip Text="Edit Tournament">
                        <MudIconButton Color="Color.Warning" Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
                    </MudTooltip>
                        <MudTooltip Text="Delete Tournament">
                        <MudIconButton Color="Color.Error" Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" />
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="TournamentResponseModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private bool isLoading = false;
    private List<TournamentResponseModel> tournaments;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // TODO use GetFromJsonAsync
            var response = await HttpClient.GetStringAsync(ApiConstants.TournamentsGetAllRoute);
            var apiResult = JsonConvert.DeserializeObject<ApiResult<List<TournamentResponseModel>>>(response);
            tournaments = apiResult.Result;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP request failed: {ex.Message}");
        }
    }
}
