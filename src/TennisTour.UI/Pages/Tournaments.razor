@page "/tournaments"
@using TennisTour.Application.Models.Tournament;
@inject IDialogService DialogService


<PageTitle>Tournaments | Tennis Tour</PageTitle>

<MudText Typo="Typo.h1" GutterBottom="true">Tournaments</MudText>

<MudDivider DividerType="DividerType.Middle" Class="my-6" />

<AuthorizeView Roles="@Roles.Admin">
    <MudButton OnClick="@(() => NavigationManager.NavigateTo(UiConstants.TournamentsAddRoute))" Variant="Variant.Filled" Color="Color.Primary" Class="mb-4">Add Tournament</MudButton>
</AuthorizeView>

@if (tournaments == null)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else if (tournaments.Count == 0)
{
    <MudAlert Severity="Severity.Info">No tournaments to display</MudAlert>
}
else {
    <MudDataGrid T="TournamentResponseModel" Items="@tournaments" ReadOnly="true" Bordered="true" Filterable="true" FilterMode="DataGridFilterMode.Simple" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <PropertyColumn Property="x => x.Name"/>
            <PropertyColumn Property="x => x.Series.GetDescription()" Title="Series" />
            <PropertyColumn Property="x => x.Surface.GetDescription()" Title="Surface" />
            <PropertyColumn Property="x => x.NumberOfRounds" Title="Number Of Rounds" />
            <TemplateColumn StickyRight="true" Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudTooltip Text="Tournament Details">
                        <MudIconButton OnClick="@((e) => NavigationManager.NavigateTo(String.Format(UiConstants.TournamentDetailsRoute, context.Item?.Id)))" Color="Color.Primary" Size="@Size.Small" Icon="@Icons.Material.Outlined.Visibility" />
                    </MudTooltip>
                    <AuthorizeView Roles="@Roles.Admin" Context="authorize">
                        <MudTooltip Text="Edit Tournament">
                            <MudIconButton Color="Color.Warning" Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(() => EditClick(context.Item.Id))"/>
                        </MudTooltip>
                    </AuthorizeView>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="TournamentResponseModel" />
        </PagerContent>
    </MudDataGrid>
	

}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private bool isLoading = false;
    private List<TournamentResponseModel> tournaments;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;

        try
        {
            var response = await HttpClient.GetStringAsync(ApiConstants.TournamentsGetAllRoute);
            var apiResult = JsonConvert.DeserializeObject<ApiResult<List<TournamentResponseModel>>>(response);
            tournaments = apiResult.Result;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP request failed: {ex.Message}");
        }
    }

    private void EditClick(Guid id)
    {
        NavigationManager.NavigateTo(String.Format(UiConstants.TournamentsEditRoute, id));
    }

    /*
     * Not using this anymore as we can't ensure from the json data we get whether this tournament has any editions
     * We have two options: Leave this removed or add a boolean for this to the json response
     * 
    private async Task DeleteClick(TournamentResponseModel tournament)
        {
        var parameters = new DialogParameters();
        parameters.Add("DisplayName", tournament.Name);
        parameters.Add("DeleteRoute", String.Format(ApiConstants.TournamentsDeleteRoute, tournament.Id));

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteEntityDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled) return;

        if (result.Data is bool succeeded && succeeded)
        {
            tournaments.Remove(tournament);
        }
    }
    */
}
