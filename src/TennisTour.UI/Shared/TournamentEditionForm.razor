@using TennisTour.Application.Models.Validators.TounamentEdition
@using TennisTour.Application.Models.TournamentEdition
@using TennisTour.Application.Models.Tournament

<MudForm Model="@model" @ref="@form" Validation="@(upsertTournamentEditionValidator.ValidateValue)" ValidationDelay="0">
    <MudCardContent>
        <MudDatePicker @bind-Date="model.DateStart" Label="Start Date" Variant="Variant.Outlined" Editable="true" Placeholder="Select Start Date" Class="mb-4" />
        <MudDatePicker @bind-Date="model.DateEnd" Label="End Date" Variant="Variant.Outlined" Editable="true" Placeholder="Select End Date" Class="mb-4" />
        <MudAutocomplete T="TournamentResponseModel" Label="Select Tournament" @bind-Value="selectedTournament" Variant="Variant.Outlined"
                         SearchFunc="@Search" ToStringFunc="@(e => e.Name)">
        </MudAutocomplete>
    </MudCardContent>
</MudForm>
<MudCardActions>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SubmitClick">Save</MudButton>
</MudCardActions>

@code {
    private MudForm form;

    [Parameter]
    public UpsertTournamentEditionModel model { get; set; }

    [Parameter]
    public Func<Task> Submit { get; set; }

    private TournamentResponseModel selectedTournament;

    private UpsertTournamentEditionModelValidator upsertTournamentEditionValidator = new UpsertTournamentEditionModelValidator();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync(String.Format(ApiConstants.TournamentsGetOneRoute, model.TournamentId));
            response.EnsureSuccessStatusCode();

            var apiResult = JsonConvert.DeserializeObject<ApiResult<TournamentResponseModel>>(await response.Content.ReadAsStringAsync());
            selectedTournament = apiResult.Result;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP request failed: {ex.Message}");
        }
    }

    private async Task<IEnumerable<TournamentResponseModel>> Search(string value)
    {
        if (value.Trim().Equals(""))
        {
            await SearchEmpty();
        }
        var response = await HttpClient.GetStringAsync(String.Format(ApiConstants.TournamentsSearchAllRoute, value));
        var apiResult = JsonConvert.DeserializeObject<ApiResult<List<TournamentResponseModel>>>(response);
        return apiResult.Result;
    }

    private async Task<IEnumerable<TournamentResponseModel>> SearchEmpty()
    {
        await Task.Delay(5);
        return Array.Empty<TournamentResponseModel>();
    }

    private async Task SubmitClick()
    {
        model.TournamentId = selectedTournament.Id;
        await form.Validate();

        if (form.IsValid)
        {
            await Submit();
        }
    }
}
